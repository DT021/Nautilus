// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: messages.proto
// </auto-generated>
// Original file comments:
// --------------------------------------------------------------------------------------------------
// <copyright file="messages.proto" company="Nautech Systems Pty Ltd">
//  Copyright (C) 2015-2018 Nautech Systems Pty Ltd. All rights reserved.
//  The use of this source code is governed by the license as found in the LICENSE.txt file.
//  http://www.nautechsystems.net
// </copyright>
// --------------------------------------------------------------------------------------------------
//
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Nautilus.Common.Messages {
  public static partial class BarDataServer
  {
    static readonly string __ServiceName = "invariance_proto.BarDataServer";

    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.SubscribeBarData> __Marshaller_SubscribeBarData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.SubscribeBarData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.SubscribeBarDataResponse> __Marshaller_SubscribeBarDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.SubscribeBarDataResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.UnsubscribeBarData> __Marshaller_UnsubscribeBarData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.UnsubscribeBarData.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.UnsubscribeBarDataResponse> __Marshaller_UnsubscribeBarDataResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.UnsubscribeBarDataResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Nautilus.Common.Messages.SubscribeBarData, global::Nautilus.Common.Messages.SubscribeBarDataResponse> __Method_Subscribe = new grpc::Method<global::Nautilus.Common.Messages.SubscribeBarData, global::Nautilus.Common.Messages.SubscribeBarDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Subscribe",
        __Marshaller_SubscribeBarData,
        __Marshaller_SubscribeBarDataResponse);

    static readonly grpc::Method<global::Nautilus.Common.Messages.UnsubscribeBarData, global::Nautilus.Common.Messages.UnsubscribeBarDataResponse> __Method_Unsubscribe = new grpc::Method<global::Nautilus.Common.Messages.UnsubscribeBarData, global::Nautilus.Common.Messages.UnsubscribeBarDataResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unsubscribe",
        __Marshaller_UnsubscribeBarData,
        __Marshaller_UnsubscribeBarDataResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nautilus.Common.Messages.MessagesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of BarDataServer</summary>
    public abstract partial class BarDataServerBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Nautilus.Common.Messages.SubscribeBarDataResponse> Subscribe(global::Nautilus.Common.Messages.SubscribeBarData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nautilus.Common.Messages.UnsubscribeBarDataResponse> Unsubscribe(global::Nautilus.Common.Messages.UnsubscribeBarData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BarDataServer</summary>
    public partial class BarDataServerClient : grpc::ClientBase<BarDataServerClient>
    {
      /// <summary>Creates a new client for BarDataServer</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BarDataServerClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BarDataServer that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BarDataServerClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BarDataServerClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BarDataServerClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Nautilus.Common.Messages.SubscribeBarDataResponse Subscribe(global::Nautilus.Common.Messages.SubscribeBarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Subscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nautilus.Common.Messages.SubscribeBarDataResponse Subscribe(global::Nautilus.Common.Messages.SubscribeBarData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Subscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.SubscribeBarDataResponse> SubscribeAsync(global::Nautilus.Common.Messages.SubscribeBarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.SubscribeBarDataResponse> SubscribeAsync(global::Nautilus.Common.Messages.SubscribeBarData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Subscribe, null, options, request);
      }
      public virtual global::Nautilus.Common.Messages.UnsubscribeBarDataResponse Unsubscribe(global::Nautilus.Common.Messages.UnsubscribeBarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unsubscribe(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nautilus.Common.Messages.UnsubscribeBarDataResponse Unsubscribe(global::Nautilus.Common.Messages.UnsubscribeBarData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unsubscribe, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.UnsubscribeBarDataResponse> UnsubscribeAsync(global::Nautilus.Common.Messages.UnsubscribeBarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnsubscribeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.UnsubscribeBarDataResponse> UnsubscribeAsync(global::Nautilus.Common.Messages.UnsubscribeBarData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unsubscribe, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BarDataServerClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BarDataServerClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BarDataServerBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe)
          .AddMethod(__Method_Unsubscribe, serviceImpl.Unsubscribe).Build();
    }

  }
  public static partial class BarDataClient
  {
    static readonly string __ServiceName = "invariance_proto.BarDataClient";

    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.HeartBeat> __Marshaller_HeartBeat = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.HeartBeat.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.Tick> __Marshaller_Tick = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.Tick.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.Empty> __Marshaller_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Nautilus.Common.Messages.BarData> __Marshaller_BarData = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Nautilus.Common.Messages.BarData.Parser.ParseFrom);

    static readonly grpc::Method<global::Nautilus.Common.Messages.HeartBeat, global::Nautilus.Common.Messages.HeartBeat> __Method_OnHeartBeatRequest = new grpc::Method<global::Nautilus.Common.Messages.HeartBeat, global::Nautilus.Common.Messages.HeartBeat>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OnHeartBeatRequest",
        __Marshaller_HeartBeat,
        __Marshaller_HeartBeat);

    static readonly grpc::Method<global::Nautilus.Common.Messages.Tick, global::Nautilus.Common.Messages.Empty> __Method_OnTickData = new grpc::Method<global::Nautilus.Common.Messages.Tick, global::Nautilus.Common.Messages.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OnTickData",
        __Marshaller_Tick,
        __Marshaller_Empty);

    static readonly grpc::Method<global::Nautilus.Common.Messages.BarData, global::Nautilus.Common.Messages.Empty> __Method_OnBarData = new grpc::Method<global::Nautilus.Common.Messages.BarData, global::Nautilus.Common.Messages.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "OnBarData",
        __Marshaller_BarData,
        __Marshaller_Empty);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Nautilus.Common.Messages.MessagesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of BarDataClient</summary>
    public abstract partial class BarDataClientBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Nautilus.Common.Messages.HeartBeat> OnHeartBeatRequest(global::Nautilus.Common.Messages.HeartBeat request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nautilus.Common.Messages.Empty> OnTickData(global::Nautilus.Common.Messages.Tick request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Nautilus.Common.Messages.Empty> OnBarData(global::Nautilus.Common.Messages.BarData request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for BarDataClient</summary>
    public partial class BarDataClientClient : grpc::ClientBase<BarDataClientClient>
    {
      /// <summary>Creates a new client for BarDataClient</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public BarDataClientClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for BarDataClient that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public BarDataClientClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected BarDataClientClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected BarDataClientClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Nautilus.Common.Messages.HeartBeat OnHeartBeatRequest(global::Nautilus.Common.Messages.HeartBeat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnHeartBeatRequest(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nautilus.Common.Messages.HeartBeat OnHeartBeatRequest(global::Nautilus.Common.Messages.HeartBeat request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OnHeartBeatRequest, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.HeartBeat> OnHeartBeatRequestAsync(global::Nautilus.Common.Messages.HeartBeat request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnHeartBeatRequestAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.HeartBeat> OnHeartBeatRequestAsync(global::Nautilus.Common.Messages.HeartBeat request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OnHeartBeatRequest, null, options, request);
      }
      public virtual global::Nautilus.Common.Messages.Empty OnTickData(global::Nautilus.Common.Messages.Tick request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnTickData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nautilus.Common.Messages.Empty OnTickData(global::Nautilus.Common.Messages.Tick request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OnTickData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.Empty> OnTickDataAsync(global::Nautilus.Common.Messages.Tick request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnTickDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.Empty> OnTickDataAsync(global::Nautilus.Common.Messages.Tick request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OnTickData, null, options, request);
      }
      public virtual global::Nautilus.Common.Messages.Empty OnBarData(global::Nautilus.Common.Messages.BarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnBarData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Nautilus.Common.Messages.Empty OnBarData(global::Nautilus.Common.Messages.BarData request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_OnBarData, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.Empty> OnBarDataAsync(global::Nautilus.Common.Messages.BarData request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return OnBarDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Nautilus.Common.Messages.Empty> OnBarDataAsync(global::Nautilus.Common.Messages.BarData request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_OnBarData, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override BarDataClientClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new BarDataClientClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(BarDataClientBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_OnHeartBeatRequest, serviceImpl.OnHeartBeatRequest)
          .AddMethod(__Method_OnTickData, serviceImpl.OnTickData)
          .AddMethod(__Method_OnBarData, serviceImpl.OnBarData).Build();
    }

  }
}
#endregion
